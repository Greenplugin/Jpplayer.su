<?php
/**
 * Created by PhpStorm.
 * User: dobro
 * Date: 19.08.16
 * Time: 11:10
 */

namespace App\Lib;

use App\TelegramMessageLog;
use App\Lib;
use App\User;
use App\Key;
use Illuminate\Foundation\Auth\AuthenticatesAndRegistersUsers;
use App\Http\Controllers\TelegramApi;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;

class TelegramBot
{
    protected $commands = [
        /*hello block*/
        '–ø—Ä–∏–≤–µ—Ç' => 'hello',
        '–∑–¥—Ä–∞—Å—Ç–µ' => 'hello',
        '–¥—Ä–∞—Å—Ç–∏' => 'hello',
        '–∫–∞–∫ –¥–µ–ª–∞?' => 'hello',
        '–∫–∞–∫ –¥–µ–ª–∞' => 'hello',
        '–∫–∞–∫ –¥–µ–ª' => 'hello',
        '–∫–∞–∫ –¥–µ–ª?' => 'hello',

        /*commands*/
        '/start' => 'start',
        '/help' => 'help',

    ];

    protected $regular = [
      "[a-fA-F0-9_-]{16}" => 'calculateErc',
      "/start [a-fA-F0-9_-]{64}" => 'register'
    ];

    public function exec($input){
        $notFound = false;
        if(isset($input['text'])){
            if(isset($this->commands[$input['text']])){
                $f = $this->commands[$input['text']];
                return $this->$f($input);
            } else{
               foreach ($this->regular as $key => $f){
                   if(mb_ereg_match($key, $input['text'])){
                       return $this->$f($input);
                   }
               }
            }
        }
        else{
            return($this->_not_found());
        }
        return($this->_not_found());

    }

    /**
     * @param $userId
     * @param string $size
     * @param bool $current
     * @return string
     */
    public function getProfilePhoto($userId, $size = 'max', $current = true){
        $fileIds = json_decode(file_get_contents("https://api.telegram.org/bot".config('telegram.token')."/getUserProfilePhotos?user_id=".$userId),true);
        $fileId = $fileIds['result']['photos'][0][count($fileIds['result']['photos'][0]) - 1]['file_id'];
        $fileLinks = json_decode(file_get_contents("https://api.telegram.org/bot".config('telegram.token')."/getFile?file_id=".$fileId),true);
        //Log::info(json_encode($fileLinks));
        return "https://api.telegram.org/file/bot".config('telegram.token')."/".$fileLinks['result']['file_path'];
    }

    protected function hello($text){

        return [
            'text'=>"–ü—Ä–∏–≤–µ—Ç, –Ω—É —á—Ç–æ —Ç–∞–º, —Ç—ã –Ω–∞—à–µ–ª ERC? –£–∑–Ω–∞—Ç—å –≥–¥–µ –≤–∑—è—Ç—å ERC –º–æ–∂–Ω–æ –Ω–∞ —Ñ–æ—Ä—É–º–µ forum.jpplayer.su",
            'callback' => false,
            'reply' => false
        ];
    }

    protected function start($text){
        $current_user = User::where('telegram_id', $text['from']['id'])->first();
        if(!$current_user){

            if(!isset($text['from']['username'])){
                $text['from']['username'] = '';
            }

            if(!isset($text['from']['first_name'])){
                $text['from']['first_name'] = '';
            }

            if(!isset($text['from']['last_name'])){
                $text['from']['last_name'] = '';
            }

            $arr = openssl_random_pseudo_bytes(8, $strong);
            $password = bin2hex($arr);

            $current_user = User::create([
                'name' => $text['from']['first_name'] . ' ' . $text['from']['last_name'],
                'telegram_id' => $text['from']['id'],
                'email' => $text['from']['id'],
                'telegram_username' => $text['from']['username'],
                'password' => bcrypt($password),
            ]);

            $tgAva = $this->getProfilePhoto($text['from']['id']);
            Storage::disk('user')->put('avatars/'.$current_user['id'].'/avatar.jpg', file_get_contents($tgAva));
            User::where(['id'=>$current_user['id']])->update(['avatar' => '/users/avatars/'.$current_user['id'].'/avatar.jpg'] );

            return [
                'text'=>"–ü—Ä–∏–≤–µ—Ç, ".$current_user['name'].", –ù—É –≤–æ—Ç –¢—ã –∏ –∑–∞—Ä–µ–≥–∞–ª—Å—è –Ω–∞ —Å–∞–π—Ç–µ jpplayer, —è –ø–æ—Å—Ç–∞–≤–∏–ª –¢–µ–±–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å \"$password\", –µ–≥–æ –¢—ã —Å–º–æ–∂–µ—à—å —Å–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –Ω–∞–ø–∏—Å–∞–≤ –º–Ω–µ \"–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å %—Ç–≤–æ–π –ø–∞—Ä–æ–ª—å%\" \n\n –Ø –ø–æ–º–æ–≥—É –¢–µ–±–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ Toyota. –ë–æ–ª—å—à–µ —è –Ω–∏—á–µ–≥–æ –ø–æ–∫–∞ –Ω–µ —É–º–µ—é üòû, –ù–æ –º–µ–Ω—è –µ—â–µ –º–Ω–æ–≥–æ–º—É —Å–∫–æ—Ä–æ –Ω–∞—É—á–∞—Ç! –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ ERC \n\n –£–∑–Ω–∞—Ç—å –≥–¥–µ –≤–∑—è—Ç—å ERC –º–æ–∂–Ω–æ –Ω–∞ —Ñ–æ—Ä—É–º–µ forum.jpplayer.su",
                //'text'=>json_encode($text),
                'callback' => false,
                'reply' => false
            ];
        } else {
            $tgAva = $this->getProfilePhoto($text['from']['id']);
            Storage::disk('user')->put('avatars/'.$current_user['id'].'/avatar.jpg', file_get_contents($tgAva));
            User::where(['id'=>$current_user['id']])->update(['avatar' => '/users/avatars/'.$current_user['id'].'/avatar.jpg'] );

            return [
                'text'=>"–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –¢–µ–±–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ Toyota. –ë–æ–ª—å—à–µ —è –Ω–∏—á–µ–≥–æ –ø–æ–∫–∞ –Ω–µ —É–º–µ—é üòû, –ù–æ –º–µ–Ω—è –µ—â–µ –º–Ω–æ–≥–æ–º—É —Å–∫–æ—Ä–æ –Ω–∞—É—á–∞—Ç! –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ ERC \n –£–∑–Ω–∞—Ç—å –≥–¥–µ –≤–∑—è—Ç—å ERC –º–æ–∂–Ω–æ –Ω–∞ —Ñ–æ—Ä—É–º–µ forum.jpplayer.su \n –∏ –¥–∞, —Ç–µ–ø–µ—Ä—å –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–∞–π—Ç–µ",
                'callback' => false,
                'reply' => false
            ];
        }

    }

    protected function help($text){
        return [
            'text'=>"–Ø —Å–∫—Ä–æ–º–Ω—ã–π —Ä–æ–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ –µ–≥–æ erc, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å erc –≤ —á–∞—Ç –∏ —è –¥–∞–º –¢–µ–±–µ –∫–æ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ \n –£–∑–Ω–∞—Ç—å –≥–¥–µ –≤–∑—è—Ç—å ERC –º–æ–∂–Ω–æ –Ω–∞ —Ñ–æ—Ä—É–º–µ forum.jpplayer.su",
            'callback' => false,
            'reply' => false
        ];
    }

    protected function _not_found(){
        return [
            'text'=>"–ö —Ç–∞–∫–æ–º—É –º–µ–Ω—è –∂–∏–∑–Ω—å –Ω–µ –≥–æ—Ç–æ–≤–∏–ª–∞. \n –ù–æ –µ—Å–ª–∏ —á—Ç–æ, ERC –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 16 —Å–∏–º–≤–æ–ª–æ–≤.",
            'callback' => false,
            'reply' => false
        ];
    }

    protected function register($text){
        return [
            'text'=>"–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –¢–µ–±–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ Toyota. –ë–æ–ª—å—à–µ —è –Ω–∏—á–µ–≥–æ –ø–æ–∫–∞ –Ω–µ —É–º–µ—é üòû, –ù–æ –º–µ–Ω—è –µ—â–µ –º–Ω–æ–≥–æ–º—É —Å–∫–æ—Ä–æ –Ω–∞—É—á–∞—Ç! –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ ERC \n –£–∑–Ω–∞—Ç—å –≥–¥–µ –≤–∑—è—Ç—å ERC –º–æ–∂–Ω–æ –Ω–∞ —Ñ–æ—Ä—É–º–µ forum.jpplayer.su, –∏ –¥–∞, –Ω–∞ —Å–∞–π—Ç–µ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –º–æ–∂–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ —Å–∞–º–∞ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å",
            'callback' => 'authThisUser',
            'reply' => false
        ];
    }

    protected function calculateErc($text){
        $calc = new Lib\Calc();
        $current_user = User::where('telegram_id', $text['from']['id'])->first();

        if($current_user){
            $key = $calc->getErcKey($text['text']);



            if($key['exception']){
                $ex = '<b> –í–æ–∑–º–æ–∂–Ω–æ –∫–ª—é—á –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç, –ø–æ–∏–∑–æ—à–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –ø–æ–¥–æ—à–µ–ª, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @GreenPlugin</b>';
            } else {
                $ex = '';
            }

            //TelegramMessageLog::insert([ 'value' => json_encode($current_user)]);

            Key::create([
                'device_type'=>'erc',
                'result'=>$key['result'],
                'comment'=>$ex,
                'app_type'=>'telegram',
                'input_data'=>$text['text'],
                'user_id'=>$current_user['id'],
            ]);

            $key = $key['result'];
            if($key){
                return [
                    'text'=>"–Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∫–ª—é—á–∏–∫, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ–≥–æ –≤–≤–µ—Å—Ç–∏ –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —Å –í–æ–ø—Ä–æ—Å–∞–º–∏ –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–∞ —Ñ–æ—Ä—É–º forum.jpplayer.su \n --------- –ö–ª—é—á -------- \n <strong>$key</strong> \n --------- –ö–ª—é—á -------- \n $ex",
                    'callback' => false,
                    'reply' => false
                ];
            }

            return [
                'text'=>"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á üòû",
                'callback' => false,
                'reply' => false
            ];
        } else{
            return [
                'text'=>"–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                'callback' => false,
                'reply' => false
            ];
        }


    }

}