<?php
/**
 * Created by PhpStorm.
 * User: dobro
 * Date: 19.08.16
 * Time: 11:10
 */

namespace App\Lib;

use App\TelegramMessageLog;
use App\Lib;
use App\User;
use App\Key;
use Illuminate\Foundation\Auth\AuthenticatesAndRegistersUsers;
use App\Http\Controllers\TelegramApi;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;

class TelegramBot
{
    protected $commands = [
        /*hello block*/
        '–ø—Ä–∏–≤–µ—Ç' => 'hello',
        '–∑–¥—Ä–∞—Å—Ç–µ' => 'hello',
        '–¥—Ä–∞—Å—Ç–∏' => 'hello',
        '–∫–∞–∫ –¥–µ–ª–∞?' => 'hello',
        '–∫–∞–∫ –¥–µ–ª–∞' => 'hello',
        '–∫–∞–∫ –¥–µ–ª' => 'hello',
        '–∫–∞–∫ –¥–µ–ª?' => 'hello',

        /*commands*/
        '/start' => 'start',
        '/help' => 'help',

    ];

    protected $regular = [
      "[a-fA-F0-9_-]{16}" => 'calculateErc',
      "/start [a-fA-F0-9]{64}" => 'register',
      "/start _p[a-fA-F0-9]{62}" => 'changePassword',
      "/start _b[a-zA-Z0-9]{62}" => 'bindTelegramToAccount'
    ];

    protected $fileSwitcher = [
        '*:72' => 'clarionGen'
    ];

    public function exec($input){
        $notFound = false;
        if(isset($input['text'])){
            if(isset($this->commands[$input['text']])){
                $f = $this->commands[$input['text']];
                return $this->$f($input);
            } else{
               foreach ($this->regular as $key => $f){
                   if(mb_ereg_match($key, $input['text'])){
                       return $this->$f($input);
                   }
               }
            }
        }
        elseif (isset($input['document'])){
            foreach ($this->fileSwitcher as $key=>$func){
                $k = explode(':',$key); $mime = $k[0]; $length = $k[1];
                if($mime =='*'){
                   $mime = $input['document']['mime_type'];
                }
                if($input['document']['mime_type'] == $mime && $input['document']['file_size'] == $length){
                    $input['document']['url'] = $this->getFileLinkFromTelegram($input['document']['file_id']);
                    return $this->$func($input);
                }
            }
            return[
                'text'=>"–ï—Å–ª–∏ –¢—ã —Ö–æ—á–µ—à—å —á—Ç–æ–±—ã —è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª Clarion, —Ç–æ –≤—ã—Å—ã–ª–∞–π –º–Ω–µ —Ñ–∞–π–ª CL_SCODE.SCR –Ω–µ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π –∏ —É–±–µ–¥–∏—Å—å —á—Ç–æ –µ–≥–æ —Ä–∞–∑–º–µ—Ä 72 –±–∞–π—Ç–∞, –∏–Ω–∞—á–µ —è –µ–≥–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É—é, —Ç–∞–∫ –∂–µ –∫–∞–∫ —Å–¥–µ–ª–∞–ª —Å–µ–π—á–∞—Å.",
                'callback' => false,
                'reply' => false
            ];
        }
        else{
            return($this->_not_found());
        }
        return($this->_not_found());

    }

    /**
     * @param $userId
     * @param string $size
     * @param bool $current
     * @return string
     */
    public static function getProfilePhoto($userId, $size = 'max', $current = true){
        $fileIds = json_decode(file_get_contents("https://api.telegram.org/bot".config('telegram.token')."/getUserProfilePhotos?user_id=".$userId),true);
        if(isset($fileIds['result']['photos'][0])){
            $fileId = $fileIds['result']['photos'][0][count($fileIds['result']['photos'][0]) - 1]['file_id'];
            $fileLinks = json_decode(file_get_contents("https://api.telegram.org/bot".config('telegram.token')."/getFile?file_id=".$fileId),true);
            //Log::info(json_encode($fileLinks));
            return "https://api.telegram.org/file/bot".config('telegram.token')."/".$fileLinks['result']['file_path'];
        }
        return false;

    }

    public function getFileLinkFromTelegram($fileId){
        $fileLinks = json_decode(file_get_contents("https://api.telegram.org/bot".config('telegram.token')."/getFile?file_id=".$fileId),true);
        return "https://api.telegram.org/file/bot".config('telegram.token')."/".$fileLinks['result']['file_path'];
    }

    public static function send($message,$chat_id = false, $reply = false){
        $url = "https://api.telegram.org/bot".config('telegram.token')."/sendMessage";

        if(!is_array($message)){
            $content = array(
                'chat_id' => $chat_id,
                'text' => $message,
                'parse_mode' => 'html',
            );
        }
        else{
            $content = $message;
        }

        if($reply){
            $content['reply_to_message_id'] = $reply;
        }

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($content));
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/x-www-form-urlencoded'));
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);  //fix http://unitstep.net/blog/2009/05/05/using-curl-in-php-to-access-https-ssltls-protected-sites/
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $response = curl_exec ($ch);
        curl_close ($ch);
        return $response;
    }

    protected function hello($text){

        return [
            'text'=>"–ü—Ä–∏–≤–µ—Ç, –Ω—É —á—Ç–æ —Ç–∞–º, —Ç—ã –Ω–∞—à–µ–ª ERC? –£–∑–Ω–∞—Ç—å –≥–¥–µ –≤–∑—è—Ç—å ERC –º–æ–∂–Ω–æ –Ω–∞ —Ñ–æ—Ä—É–º–µ forum.jpplayer.su",
            'callback' => false,
            'reply' => false
        ];
    }

    protected function start($text){
        $current_user = User::where('telegram_id', $text['from']['id'])->first();
        if(!$current_user){

            if(!isset($text['from']['username'])){
                $text['from']['username'] = '';
            }

            if(!isset($text['from']['first_name'])){
                $text['from']['first_name'] = '';
            }

            if(!isset($text['from']['last_name'])){
                $text['from']['last_name'] = '';
            }

            $arr = openssl_random_pseudo_bytes(8, $strong);
            $password = bin2hex($arr);

            $avatar = '';
            $tgAva = $this->getProfilePhoto($text['from']['id']);
            if($tgAva){
                $path = 'avatars/' . $current_user['id'] .'/' . str_random(4) . '_'. time() . '.jpg';
                Storage::disk('user')->put($path, file_get_contents($tgAva));
                //User::where(['id'=>$current_user['id']])->update(['avatar' => '/users/'.$path] );
                $avatar = '/users/'.$path;
            }

            $current_user = User::create([
                'name' => $text['from']['first_name'] . ' ' . $text['from']['last_name'],
                'telegram_id' => $text['from']['id'],
                'email' => $text['from']['id'],
                'telegram_username' => $text['from']['username'],
                'avatar' => $avatar,
                'active' => 1,
                'unlocks' => 5,
                'password' => bcrypt($password),
            ]);

            return [
                'text'=>"–ü—Ä–∏–≤–µ—Ç, ".$current_user['name'].", –ù—É –≤–æ—Ç –¢—ã –∏ –∑–∞—Ä–µ–≥–∞–ª—Å—è –Ω–∞ —Å–∞–π—Ç–µ jpplayer, —è –ø–æ—Å—Ç–∞–≤–∏–ª –¢–µ–±–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å \"$password\", –µ–≥–æ –¢—ã —Å–º–æ–∂–µ—à—å —Å–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è.\n\n –Ø –ø–æ–º–æ–≥—É –¢–µ–±–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ Toyota –∏–ª–∏ Clarion! –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ ERC –∫–æ–¥ –∏–ª–∏ SCR —Ñ–∞–π–ª \n\n –£–∑–Ω–∞—Ç—å –≥–¥–µ –≤–∑—è—Ç—å ERC –∫–æ–¥ –∏–ª–∏ SCR —Ñ–∞–π–ª –º–æ–∂–Ω–æ –Ω–∞ —Ñ–æ—Ä—É–º–µ forum.jpplayer.su",
                //'text'=>json_encode($text),
                'callback' => false,
                'reply' => false
            ];
        } else {
            $tgAva = $this->getProfilePhoto($text['from']['id']);

            if(!$current_user['avatar']){
                if($tgAva){
                    $path = 'avatars/' . $current_user['id'] .'/' . str_random(4) . '_'. time() . '.jpg';
                    Storage::disk('user')->put($path, file_get_contents($tgAva));
                    $avatar = '/users/'.$path;
                }else{
                    $avatar = '';
                }
            }else{
                $avatar = $current_user['avatar'];
            }

            User::where('id', $current_user['id'])->update([
                'active' => 1,
                'avatar'=> $avatar,
            ]);

            return [
                'text'=>"–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –¢–µ–±–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ Toyota. –ë–æ–ª—å—à–µ —è –Ω–∏—á–µ–≥–æ –ø–æ–∫–∞ –Ω–µ —É–º–µ—é üòû, –ù–æ –º–µ–Ω—è –µ—â–µ –º–Ω–æ–≥–æ–º—É —Å–∫–æ—Ä–æ –Ω–∞—É—á–∞—Ç! –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ ERC \n –£–∑–Ω–∞—Ç—å –≥–¥–µ –≤–∑—è—Ç—å ERC –º–æ–∂–Ω–æ –Ω–∞ —Ñ–æ—Ä—É–º–µ forum.jpplayer.su \n –∏ –¥–∞, —Ç–µ–ø–µ—Ä—å –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–∞–π—Ç–µ",
                'callback' => false,
                'reply' => false
            ];
        }

    }

    protected function help($text){
        return [
            'text'=>"–Ø —Å–∫—Ä–æ–º–Ω—ã–π —Ä–æ–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ –µ–≥–æ erc, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å erc –≤ —á–∞—Ç –∏ —è –¥–∞–º –¢–µ–±–µ –∫–æ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ \n –£–∑–Ω–∞—Ç—å –≥–¥–µ –≤–∑—è—Ç—å ERC –º–æ–∂–Ω–æ –Ω–∞ —Ñ–æ—Ä—É–º–µ forum.jpplayer.su",
            'callback' => false,
            'reply' => false
        ];
    }

    protected function _not_found(){
        return [
            'text'=>"–ö —Ç–∞–∫–æ–º—É –º–µ–Ω—è –∂–∏–∑–Ω—å –Ω–µ –≥–æ—Ç–æ–≤–∏–ª–∞. \n –ù–æ –µ—Å–ª–∏ —á—Ç–æ, ERC –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 16 —Å–∏–º–≤–æ–ª–æ–≤. \n –ê —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –¥–ª—è Clarion –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ñ–∞–π–ª <b>CL_SCODE.SCR</b>. \n –£—á—Ç–∏ —á—Ç–æ –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É Clarion —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏–º–∏—Ç—ã",
            'callback' => false,
            'reply' => false
        ];
    }

    protected function register($text){
        return [
            'text'=>"–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –¢–µ–±–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ Toyota. –ë–æ–ª—å—à–µ —è –Ω–∏—á–µ–≥–æ –ø–æ–∫–∞ –Ω–µ —É–º–µ—é üòû, –ù–æ –º–µ–Ω—è –µ—â–µ –º–Ω–æ–≥–æ–º—É —Å–∫–æ—Ä–æ –Ω–∞—É—á–∞—Ç! –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ ERC \n –£–∑–Ω–∞—Ç—å –≥–¥–µ –≤–∑—è—Ç—å ERC –º–æ–∂–Ω–æ –Ω–∞ —Ñ–æ—Ä—É–º–µ forum.jpplayer.su, –∏ –¥–∞, –Ω–∞ —Å–∞–π—Ç–µ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –º–æ–∂–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ —Å–∞–º–∞ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å",
            'callback' => 'authThisUser',
            'reply' => false
        ];
    }

    protected function calculateErc($text){
        $calc = new Lib\Calc();
        $current_user = User::where('telegram_id', $text['from']['id'])->first();

        if($current_user){
            $key = $calc->getErcKey($text['text']);



            if($key['exception']){
                $ex = '<b> –í–æ–∑–º–æ–∂–Ω–æ –∫–ª—é—á –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç, –ø–æ–∏–∑–æ—à–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –ø–æ–¥–æ—à–µ–ª, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @GreenPlugin</b>';
            } else {
                $ex = '';
            }

            //TelegramMessageLog::insert([ 'value' => json_encode($current_user)]);

            Key::create([
                'device_type'=>'erc',
                'result'=>$key['result'],
                'comment'=>$ex,
                'app_type'=>'telegram',
                'input_data'=>$text['text'],
                'user_id'=>$current_user['id'],
            ]);

            $key = $key['result'];
            if($key){
                return [
                    'text'=>"–Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∫–ª—é—á–∏–∫, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ–≥–æ –≤–≤–µ—Å—Ç–∏ –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —Å –í–æ–ø—Ä–æ—Å–∞–º–∏ –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–∞ —Ñ–æ—Ä—É–º forum.jpplayer.su \n --------- –ö–ª—é—á -------- \n <strong>$key</strong> \n --------- –ö–ª—é—á -------- \n $ex",
                    'callback' => false,
                    'reply' => false
                ];
            }

            return [
                'text'=>"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á üòû",
                'callback' => false,
                'reply' => false
            ];
        } else{
            return [
                'text'=>"–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                'callback' => false,
                'reply' => false
            ];
        }


    }

    protected function changePassword($text){
        $current_user = User::where('telegram_id', $text['from']['id'])->first();
        $text['text'] = explode(' ', $text['text'])[1];
        if($current_user){
            User::where('id', $current_user['id'])->update([
                'tg_password_key' => $text['text']
            ]);
            return [
                'text'=>"–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞, —è —Å–æ–æ–±—â—É –∫–æ–≥–¥–∞ –ø–∞—Ä–æ–ª—å —Å–º–µ–Ω–∏—Ç—Å—è.\n –ö—Å—Ç–∞—Ç–∏ –¥–∞, –Ω–µ –æ–±–Ω–æ–≤–ª—è–π —Å—Ç—Ä–∞–Ω–∏—Ü—É, –ø–æ–∫–∞ —è –Ω–µ —Ä–∞–∑—Ä–µ—à—É.",
                'callback' => false,
                'reply' => false
            ];
        }else{
            return [
                'text'=>"–û –Ω–µ—Ç! —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –¢—ã –ø–æ–Ω–∏–º–∞–µ—à—å? –¢—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—à—å!",
                'callback' => false,
                'reply' => false
            ];
        }
    }

    protected function bindTelegramToAccount($text){
        $key = explode(' ', $text['text'])[1];
        $left = substr($key, 0, 32);
        $right = substr($key, 32, 32);
        $current_user = User::where('telegram_id', $left)->first();

        if($current_user) {
            $tgUser = User::where('telegram_id', $text['from']['id'])->first();
            if (!$tgUser) {

                if(!$current_user['avatar']){
                    $tgAva = $this->getProfilePhoto($text['from']['id']);
                    if($tgAva){
                        $path = 'avatars/' . $current_user['id'] .'/' . str_random(4) . '_'. time() . '.jpg';
                        Storage::disk('user')->put($path, file_get_contents($tgAva));
                        //User::where(['id'=>$current_user['id']])->update(['avatar' => '/users/'.$path] );
                        $avatar = '/users/'.$path;
                    }else{
                        $avatar = '';
                    }
                }else{
                    $avatar = $current_user['avatar'];
                }


                User::where('id', $current_user['id'])->update([
                    'local_key'         => '',
                    'remote_key'         => '',
                    'telegram_id'       => $text['from']['id'],
                    'telegram_username' => $text['from']['username'],
                    'unlocks'           => $current_user['unlocks'] + 5,
                    'avatar'            => $avatar,
                ]);

                return [
                    'text' => "–Ø –ø—Ä–∏–≤—è–∑–∞–ª –¢–≤–æ–π Telegram –∫ –æ–±—ã—á–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?",
                    'callback' => false,
                    'reply' => false
                ];
            } else{

                if(!$current_user['avatar']){
                    $tgAva = $this->getProfilePhoto($text['from']['id']);
                    if($tgAva){
                        $path = 'avatars/' . $current_user['id'] .'/' . str_random(4) . '_'. time() . '.jpg';
                        Storage::disk('user')->put($path, file_get_contents($tgAva));
                        //User::where(['id'=>$current_user['id']])->update(['avatar' => '/users/'.$path] );
                        $avatar = '/users/'.$path;
                    }else{
                        $avatar = '';
                    }
                }else{
                    $avatar = $current_user['avatar'];
                }

                User::where('id', $tgUser['id'])->update([
                    'local_key'         => '',
                    'remote_key'         => '',
                    'telegram_id' => $text['from']['id'].$current_user['id'],
                    'parent_linking' => $current_user['id'],
                    'unlocks' => 0
                ]);

                Key::where('user_id', $tgUser['id'])->update(['user_id' => $current_user['id']]);

                User::where('id', $current_user['id'])->update([
                    'local_key'         => '',
                    'remote_key'         => '',
                    'telegram_id'       => $text['from']['id'],
                    'telegram_username' => $text['from']['username'],
                    'avatar'            => $avatar,
                    'unlocks'           => $current_user['unlocks'] +  $tgUser['unlocks'],
                ]);


                return [
                    'text' => "–Ø —Å–≤—è–∑–∞–ª –î–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–∞, —Ç–µ–ø–µ—Ä—å –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏—Å—å –≤ –∞–∫–∫–∞—É–Ω—Ç–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω —ç—Ç–æ—Ç telegram",
                    'callback' => false,
                    'reply' => false
                ];
            }
        }


        return [
            'text'=>"–Ø –Ω–µ –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            'callback' => false,
            'reply' => false
        ];
    }

    protected function clarionGen($input){
        $current_user = User::where('telegram_id', $input['from']['id'])->first();
        if($current_user){
            if($current_user->unlocks > 0){
                $clarion = new Lib\Clarion();
                $data = file_get_contents($input['document']['url']);
                $result = $clarion->Decode($data);
                //$result = $data;
                $unlocks = $current_user->unlocks - 1;

                /*User::where('id', $current_user->id)->update([
                    'unlocks'=> $unlocks
                ]);*/

                Key::create([
                    'device_type'=>'Clarion',
                    'result'=>$result,
                    'comment'=>'–≠—Ç–æ —Å—É—Ä–æ–≤—ã–π –∞–Ω–ª–æ–∫–µ—Ä clarion, –æ–Ω –º–æ–ª—á–∞–ª–∏–≤ –∏ –ø—Ä—è–º–æ–ª–∏–Ω–µ–µ–Ω, –µ—Å–ª–∏ –∫–æ–¥ –Ω–∞–π—Ç–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–Ω –í–∞–º —Å–¥–µ–ª–∞–µ—Ç n/a',
                    'app_type'=>'telegram',
                    'input_data'=>base64_encode($data),
                    'user_id'=>$current_user['id'],
                ]);

                return [
                    'text'=>"–Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∫–æ–¥ –¥–ª—è –¢–≤–æ–µ–≥–æ Clarion \n ------- –∫–æ–¥ ------- \n <b>$result</b> \n ------- –∫–æ–¥ ------- \n –ü–æ–ø—Ä–æ–±—É–π, –¥–æ–ª–∂–µ–Ω –ø–æ–¥–æ–π—Ç–∏. –ê –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç - —Ç–æ –ø–∏—à–∏ –æ–± —ç—Ç–æ–º –Ω–∞ —Ñ–æ—Ä—É–º (forum.jpplayer.su). \n –ò –∫—Å–∞—Ç–∏, —É –¢–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å <b>$unlocks</b> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.",
                    'callback' => false,
                    'reply' => false
                ];
            }
            else{
                return [
                    'text'=>"–¢—ã –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –º–æ–∂e—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å –Ω–∞ —Ñ–æ—Ä—É–º–µ —á—Ç–æ–±—ã –¥–∞–ª–∏ –∞–Ω–ª–æ–∫–æ–≤ –∏–ª–∏ –≤ –ª–∏—á–∫—É @Greenplugin —Ç—É—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º",
                    'callback' => false,
                    'reply' => false
                ];
            }
        } else{
            return [
                'text'=>"–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                'callback' => false,
                'reply' => false
            ];
        }

    }
}